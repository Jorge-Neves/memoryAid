{"ast":null,"code":"var _jsxFileName = \"/Users/joao_matos/workplace/project/memory-aid/src/components/Flashcards/FlashcardMultiChoice.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst FlashcardMultiChoice = props => {\n  _s();\n\n  const {\n    question,\n    answer,\n    options\n  } = props.flashcardMultiChoice;\n  const [flip, setFlip] = useState(false);\n  const [height, setHeight] = useState('initial');\n  const frontEl = useRef();\n  const backEl = useRef();\n\n  const setMaxHeight = () => {\n    const frontHeight = frontEl.current.getBoundingClientRect().height;\n    const backHeight = backEl.current.getBoundingClientRect().height;\n    setHeight(Math.max(frontHeight, backHeight, 100));\n  };\n\n  useEffect(setMaxHeight, [question, answer, options]);\n\n  const cardFlip = () => {\n    setFlip(!flip);\n    setTimeout(() => {\n      setFlip(false);\n    }, 5000);\n  };\n\n  useEffect(() => {\n    window.addEventListener('resize', setMaxHeight);\n    return () => window.removeEventListener('resize', setMaxHeight);\n  });\n  let userInput;\n\n  const cardFlipHandler = () => {\n    if (!!userInput) {\n      clearTimeout(userInput);\n    }\n\n    userInput = setTimeout(() => {\n      cardFlip();\n      userInput = undefined;\n    }, 100);\n  }; //Randomized choices array with\n  //Fisher-Yates Shuffle algorithm\n\n\n  const shuffled = array => {\n    const copy = array.slice();\n    let result = [];\n\n    while (copy.length > 0) {\n      const randomIndex = Math.floor(Math.random() * copy.length);\n      result.push(copy[randomIndex]);\n      copy.splice(randomIndex, 1);\n    }\n\n    return result;\n  };\n\n  const shuffledOptions = shuffled(options);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `card ${flip ? 'flip' : ''}`,\n    style: {\n      height: height\n    },\n    onClick: cardFlipHandler,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"front\",\n      ref: frontEl,\n      children: [question, /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flashcard-options\",\n        children: shuffledOptions.map(option => {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flashcard-option\",\n            children: option\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 20\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"back\",\n      ref: backEl,\n      children: /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: answer\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n};\n\n_s(FlashcardMultiChoice, \"Ildkd5pYPNDGqciS83XMRfSe8ek=\");\n\n_c = FlashcardMultiChoice;\nexport default FlashcardMultiChoice;\n\nvar _c;\n\n$RefreshReg$(_c, \"FlashcardMultiChoice\");","map":{"version":3,"sources":["/Users/joao_matos/workplace/project/memory-aid/src/components/Flashcards/FlashcardMultiChoice.tsx"],"names":["React","useState","useEffect","useRef","FlashcardMultiChoice","props","question","answer","options","flashcardMultiChoice","flip","setFlip","height","setHeight","frontEl","backEl","setMaxHeight","frontHeight","current","getBoundingClientRect","backHeight","Math","max","cardFlip","setTimeout","window","addEventListener","removeEventListener","userInput","cardFlipHandler","clearTimeout","undefined","shuffled","array","copy","slice","result","length","randomIndex","floor","random","push","splice","shuffledOptions","map","option"],"mappings":";;;AAAA,OAAOA,KAAP,IAEEC,QAFF,EAGEC,SAHF,EAIEC,MAJF,QAMO,OANP;;;AAeA,MAAMC,oBAEJ,GAAIC,KAAD,IAAW;AAAA;;AACd,QAAM;AAAEC,IAAAA,QAAF;AAAYC,IAAAA,MAAZ;AAAoBC,IAAAA;AAApB,MAAgCH,KAAK,CAACI,oBAA5C;AACA,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBV,QAAQ,CAAU,KAAV,CAAhC;AACA,QAAM,CAACW,MAAD,EAASC,SAAT,IAAsBZ,QAAQ,CAAkB,SAAlB,CAApC;AACA,QAAMa,OAAO,GAAGX,MAAM,EAAtB;AACA,QAAMY,MAAM,GAAGZ,MAAM,EAArB;;AACA,QAAMa,YAAY,GAAG,MAAM;AACzB,UAAMC,WAAW,GAAGH,OAAO,CAACI,OAAR,CAAgBC,qBAAhB,GAAwCP,MAA5D;AACA,UAAMQ,UAAU,GAAGL,MAAM,CAACG,OAAP,CAAeC,qBAAf,GAAuCP,MAA1D;AACAC,IAAAA,SAAS,CAACQ,IAAI,CAACC,GAAL,CAASL,WAAT,EAAsBG,UAAtB,EAAkC,GAAlC,CAAD,CAAT;AACD,GAJD;;AAKAlB,EAAAA,SAAS,CAACc,YAAD,EAAe,CAACV,QAAD,EAAWC,MAAX,EAAmBC,OAAnB,CAAf,CAAT;;AACA,QAAMe,QAAQ,GAAG,MAAM;AACrBZ,IAAAA,OAAO,CAAC,CAACD,IAAF,CAAP;AACAc,IAAAA,UAAU,CAAC,MAAM;AACfb,MAAAA,OAAO,CAAC,KAAD,CAAP;AACD,KAFS,EAEP,IAFO,CAAV;AAGD,GALD;;AAMAT,EAAAA,SAAS,CAAC,MAAM;AACduB,IAAAA,MAAM,CAACC,gBAAP,CAAwB,QAAxB,EAAkCV,YAAlC;AACA,WAAO,MAAMS,MAAM,CAACE,mBAAP,CAA2B,QAA3B,EAAqCX,YAArC,CAAb;AACD,GAHQ,CAAT;AAIA,MAAIY,SAAJ;;AACA,QAAMC,eAAe,GAAG,MAAM;AAC5B,QAAI,CAAC,CAACD,SAAN,EAAiB;AACfE,MAAAA,YAAY,CAACF,SAAD,CAAZ;AACD;;AACDA,IAAAA,SAAS,GAAGJ,UAAU,CAAC,MAAM;AAC3BD,MAAAA,QAAQ;AACRK,MAAAA,SAAS,GAAGG,SAAZ;AACD,KAHqB,EAGnB,GAHmB,CAAtB;AAID,GARD,CAvBc,CAgCd;AACA;;;AACA,QAAMC,QAAQ,GAAIC,KAAD,IAAqB;AACpC,UAAMC,IAAI,GAAGD,KAAK,CAACE,KAAN,EAAb;AACA,QAAIC,MAAM,GAAG,EAAb;;AACA,WAAOF,IAAI,CAACG,MAAL,GAAc,CAArB,EAAwB;AACtB,YAAMC,WAAW,GAAGjB,IAAI,CAACkB,KAAL,CAAWlB,IAAI,CAACmB,MAAL,KAAgBN,IAAI,CAACG,MAAhC,CAApB;AACAD,MAAAA,MAAM,CAACK,IAAP,CAAYP,IAAI,CAACI,WAAD,CAAhB;AACAJ,MAAAA,IAAI,CAACQ,MAAL,CAAYJ,WAAZ,EAAyB,CAAzB;AACD;;AACD,WAAOF,MAAP;AACD,GATD;;AAUA,QAAMO,eAAe,GAAGX,QAAQ,CAACxB,OAAD,CAAhC;AAEA,sBACE;AACE,IAAA,SAAS,EAAG,QAAOE,IAAI,GAAG,MAAH,GAAY,EAAG,EADxC;AAEE,IAAA,KAAK,EAAE;AAAEE,MAAAA,MAAM,EAAEA;AAAV,KAFT;AAGE,IAAA,OAAO,EAAEiB,eAHX;AAAA,4BAKE;AAAK,MAAA,SAAS,EAAC,OAAf;AAAuB,MAAA,GAAG,EAAEf,OAA5B;AAAA,iBACGR,QADH,eAEE;AAAK,QAAA,SAAS,EAAC,mBAAf;AAAA,kBACGqC,eAAe,CAACC,GAAhB,CAAqBC,MAAD,IAAY;AAC/B,8BAAO;AAAK,YAAA,SAAS,EAAC,kBAAf;AAAA,sBAAmCA;AAAnC;AAAA;AAAA;AAAA;AAAA,kBAAP;AACD,SAFA;AADH;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YALF,eAaE;AAAK,MAAA,SAAS,EAAC,MAAf;AAAsB,MAAA,GAAG,EAAE9B,MAA3B;AAAA,6BACE;AAAA,kBAAKR;AAAL;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAbF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAmBD,CAnED;;GAAMH,oB;;KAAAA,oB;AAqEN,eAAeA,oBAAf","sourcesContent":["import React, {\n  FC,\n  useState,\n  useEffect,\n  useRef,\n  MutableRefObject,\n} from 'react';\n\ntype flashcardMultiChoiceAlias = {\n  id: string;\n  question: string;\n  answer: string;\n  options: string[];\n};\n\nconst FlashcardMultiChoice: FC<{\n  flashcardMultiChoice: flashcardMultiChoiceAlias;\n}> = (props) => {\n  const { question, answer, options } = props.flashcardMultiChoice;\n  const [flip, setFlip] = useState<boolean>(false);\n  const [height, setHeight] = useState<number | string>('initial');\n  const frontEl = useRef() as MutableRefObject<HTMLDivElement>;\n  const backEl = useRef() as MutableRefObject<HTMLDivElement>;\n  const setMaxHeight = () => {\n    const frontHeight = frontEl.current.getBoundingClientRect().height;\n    const backHeight = backEl.current.getBoundingClientRect().height;\n    setHeight(Math.max(frontHeight, backHeight, 100));\n  };\n  useEffect(setMaxHeight, [question, answer, options]);\n  const cardFlip = () => {\n    setFlip(!flip);\n    setTimeout(() => {\n      setFlip(false);\n    }, 5000);\n  };\n  useEffect(() => {\n    window.addEventListener('resize', setMaxHeight);\n    return () => window.removeEventListener('resize', setMaxHeight);\n  });\n  let userInput: ReturnType<typeof setTimeout> | undefined;\n  const cardFlipHandler = () => {\n    if (!!userInput) {\n      clearTimeout(userInput);\n    }\n    userInput = setTimeout(() => {\n      cardFlip();\n      userInput = undefined;\n    }, 100);\n  };\n  //Randomized choices array with\n  //Fisher-Yates Shuffle algorithm\n  const shuffled = (array: string[]) => {\n    const copy = array.slice();\n    let result = [];\n    while (copy.length > 0) {\n      const randomIndex = Math.floor(Math.random() * copy.length);\n      result.push(copy[randomIndex]);\n      copy.splice(randomIndex, 1);\n    }\n    return result;\n  };\n  const shuffledOptions = shuffled(options);\n\n  return (\n    <div\n      className={`card ${flip ? 'flip' : ''}`}\n      style={{ height: height }}\n      onClick={cardFlipHandler}\n    >\n      <div className=\"front\" ref={frontEl}>\n        {question}\n        <div className=\"flashcard-options\">\n          {shuffledOptions.map((option) => {\n            return <div className=\"flashcard-option\">{option}</div>;\n          })}\n        </div>\n      </div>\n      <div className=\"back\" ref={backEl}>\n        <h3>{answer}</h3>\n      </div>\n    </div>\n  );\n};\n\nexport default FlashcardMultiChoice;\n"]},"metadata":{},"sourceType":"module"}